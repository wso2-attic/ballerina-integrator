[
    {
        "id": "salesforce_ftp_integration",
        "name": "Salesforce & FTP Integration",
        "description": "This template demonstrates on listening to a remote FTP location and inserting data into Salesforce.",
        "tags": ["#saas", "#file-based"]
    },
    {
        "id": "salesforce_to_mysql",
        "name": "Salesforce to MySQL Integration",
        "description": "This template focuses on using batch processing to synchronize Salesforce data with a MySQL Database.",
        "tags": ["#saas", "#database"]
    },
    {
        "id": "working_with_salesforce_client",
        "name": "Working with Salesforce Client",
        "description": "This template focuses on using Salesforce client to connect with the Salesforce instance.",
        "tags": ["#saas", "#database"]
    },
    {
        "id": "alert_notification_using_amazonsqs",
        "name": "Alert Notification Using AmazonSQS",
        "description": "This template demonstrates a scenario where a listener is polling for messages in the AmazonSQS queue.",
        "tags": ["#saas"]
    },
    {
        "id": "gmail_client_application",
        "name": "Working with Gmail Connector",
        "description": "This template demonstrates how emails could be sent, read and deleted using the Ballerina Gmail connector.",
        "tags": ["#saas"]
    },
    {
        "id": "integration_with_amazon_s3_bucket",
        "name": "Working with AmazonS3 Bucket",
        "description": "This template demonstrates on connecting to AmazonS3 Client to perform operations on buckets.",
        "tags": ["#saas"]
    },
       {
        "id": "integration_with_amazon_s3_object",
        "name": "Working with AmazonS3 Object",
        "description": "This template demonstrates on connecting to AmazonS3 Client to perform operations on objects.",
        "tags": ["#saas"]
    },
    {
        "id": "file_integration_using_ftp",
        "name": "File-Based Integration using FTP",
        "description": "This template implements an FTP listener which polls a remote directory and periodically notifies the addition of a file that complies with a specified file pattern.",
        "tags": ["#file-based"]
    },
    {
        "id": "file_integration_using_smb",
        "name": "File-Based Integration using SMB",
        "description": "This template implements an SMB listener which listens to a remote directory and periodically notifies the addition of a file that complies with a specified file pattern.",
        "tags": ["#file-based"]
    },
    {
        "id": "json_data_to_activemq",
        "name": "Sending JSON data into ActiveMQ Queues",
        "description": "This template demonstrates on sending JSON data into an ActiveMQ queue using the JMS connector.",
        "tags": ["#messaging"]
    },
    {
        "id": "data_backed_service",
        "name": "Data-Backed Service",
        "description": "This template demonstrates on building a database-backed RESTful web service using Ballerina.",
        "tags": ["#database"]
    },
    {
        "id": "querying_mysql_database",
        "name": "Querying a MySQL Database",
        "description": "This template focuses on exposing a MySQL database as a service using Ballerina.",
        "tags": ["#database"]
    },
    {
        "id": "sending_a_message_to_datasource",
        "name": "Sending a Message to a Datasource",
        "description": "This template demonstrates on exposing information in the database through a RESTful service.",
        "tags": ["#database"]
    },
    {
        "id": "managing_database_transactions",
        "name": "Managing Database Transactions",
        "description": "This template demonstrates on how to manage database transactions using Ballerina.",
        "tags": ["#database", "#file-based"]
    },
    {
        "id": "pass_through_messaging",
        "name": "Pass Through Messaging",
        "description": "This template demonstrates a simple pass-through messaging scenario.",
        "tags": ["#eip"]
    },
    {
        "id": "content_based_routing",
        "name": "Content Based Routing",
        "description": "This template demonstrates how to route a message to a specific recipient based on its content.",
        "tags": ["#eip"]
    },
    {
        "id": "scatter_gather_flow",
        "name": "Scatter Gather Flow",
        "description": "This template demonstrates the scatter-gather enterprise integration pattern using Ballerina.",
        "tags": ["#eip"]
    },
    {
        "id": "service_composition",
        "name": "Service Composition",
        "description": "This template demonstrates on implementing a service composition using Ballerina.",
        "tags": ["#eip"]
    },
    {
        "id": "upload_to_ftp",
        "name": "JSON to XML Transformation and upload to FTP",
        "description": "This template demonstrates connecting to a file server with the FTP connector.",
        "tags": ["#eip"]
    },
    {
        "id": "appointment_service",
        "name": "Service Orchestration",
        "description": "This template demonstrates on how service orchestration could be achieved.",
        "tags": ["#eip"]
    },
    {
        "id": "healthcare_service",
        "name": "Backend for Frontend",
        "description": "This template demonstrates how to create separate back-end services for specific front-end applications.",
        "tags": ["#eip"]
    },
    {
        "id": "stockquote_service",
        "name": "REST to SOAP Service",
        "description": "This template demonstrates on how to call a SOAP backend with a REST request.",
        "tags": ["#service"]
    },
    {
        "id": "message_processor",
        "name": "Message Processor",
        "description": "This template demonstrates message processor in reliable delivery.",
        "tags": ["#messaging"]
    },
    {
        "id": "message_store",
        "name": "Message Store",
        "description": "This template demonstrates message store in reliable delivery.",
        "tags": ["#messaging"]
    }
]
