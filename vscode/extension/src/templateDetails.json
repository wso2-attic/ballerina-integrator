[
    {
        "id": "gsheets_salesforce_integration",
        "name": "GSheet & Salesforce API Integration",
        "description": "This template demonstrates some of the capabilities of Google SpreadSheet and Salesforce modules.",
        "tags": ["#connector"]
    },
    {
        "id": "kafka_service",
        "name": "Asynchronous Messaging with Kafka",
        "description": "This template demonstrates how to perform asynchronous messaging using the Ballerina Kafka connector.",
        "tags": ["#connector"]
    },
    {
        "id": "using_gmail_connector",
        "name": "Working with Gmail Connector",
        "description": "This template demonstrates how emails could be sent, read and deleted using the Ballerina Gmail connector.",
        "tags": ["#connector"]
    },
    {
        "id": "googlespreadsheet_service",
        "name": "Working with SpreadSheet Connector",
        "description": "This template demonstrates handling spreadsheets using the Ballerina Goodle SpreadSheet connector.",
        "tags": ["#connector"]
    },
    {
        "id": "ftp_listener",
        "name": "Handling Files using FTP Connector",
        "description": "This template will implement the FTP listener which can poll a remote directory and periodically notify the addition of a file that complies with the specified file pattern.",
        "tags": ["#connector"]
    },
    {
        "id": "smb_listener",
        "name": "Handling Files using SMB Connector",
        "description": "This template we'll implement SMB listener which will listen to a remote directory and periodically notify the addition of a file that complies with the specified file pattern.",
        "tags": ["#connector"]
    },
    {
        "id": "salesforce_client",
        "name": "Working with Salesforce Client",
        "description": "This template demonstrates how the Salesforce client performs CRUD operations for SObjects, query using SOQL, search using SOSL and describe SObjects and organizational data through the Salesforce REST API.",
        "tags": ["#connector"]
    },
    {
        "id": "amazons3_service",
        "name": "Amazon S3 Connector",
        "description": "This template demonstrates on how to use the Amazon S3 connector.",
        "tags": ["connector"]
    },
    {
        "id": "content_based_routing",
        "name": "Content Based Routing",
        "description": "This template demonstrates how to route a message to a specific recipient based on its content.",
        "tags": ["#eip"]
    },
    {
        "id": "header_based_routing",
        "name": "Header Based Routing",
        "description": "This template demonstrates an instance where a header based router is used to route requests to different endpoints based on the header of each request.",
        "tags": ["#eip"]
    },
    {
        "id": "scatter_gather_service",
        "name": "Scatter-Gather Service",
        "description": "This template demonstrates the scatter-gather enterprise integration pattern where we call multiple backends, aggregated the responses from all the backends and repond then to the client as a single response.",
        "tags": ["#eip"]
    },
    {
        "id": "xml_to_json_transformation",
        "name": "XML to JSON Transformation",
        "description": "This template demonstrates some of the message transformation capabilities.",
        "tags": ["#eip"]
    },
    {
        "id": "message_filter_service",
        "name": "Message Filtering Transformation",
        "description": "This template demonstrates an instance where message filtering is used to filter incoming requests based on their content.",
        "tags": ["#eip"]
    },
    {
        "id": "pass_through_messaging",
        "name": "Pass Through Messaging",
        "description": "This template demonstrates a simple pass-through messaging scenario.",
        "tags": ["#eip"]
    },
    {
        "id": "backend_for_frontend",
        "name": "Backend for Frontend",
        "description": "This template demonstrates on how to apply the Backend for Frontend design pattern when working with Ballerina.",
        "tags": ["#eip"]
    },
    {
        "id": "hello_world_service",
        "name": "Hello World Service",
        "description": "This template demonstrates a simple Hello World Service.",
        "tags": ["#service"]
    },
    {
        "id": "asynchronous_invocation",
        "name": "Asynchronous Invocation",
        "description": "This template demonstrates how asynchronous invocations could be done using Ballerina.",
        "tags": ["#service"]
    },
    {
        "id": "parallel_service_orchestration",
        "name": "Parallel Service Orchestration",
        "description": "This template demonstrates on how parallel service orchestration could be achieved.",
        "tags": ["#service"]
    },
    {
        "id": "restful_service",
        "name": "Restful Service",
        "description": "This template demonstrates on how Restful services could be implemented.",
        "tags": ["#service"]
    },
    {
        "id": "service_composition",
        "name": "Service Composition",
        "description": "This template demonstrates on handling service compositions.",
        "tags": ["#service"]
    },
    {
        "id": "http_to_jms",
        "name": "Protocol Switching HTTP to JMS",
        "description": "This template demonstrates how protocol wwitching from HTTP to JMS could be done.",
        "tags": ["#messaging"]
    },
    {
        "id": "message_broadcasting",
        "name": "Message Broadcasting",
        "description": "This template demonstrates how message broadcasting could be achieved using Ballerina.",
        "tags": ["#messaging"]
    },
    {
        "id": "messaging_with_activemq",
        "name": "Messaging with ActiveMQ",
        "description": "This template demonstrates how messaging could be done using the Apache ActiveMQ message broker.",
        "tags": ["#messaging"]
    },
    {
        "id": "asynchronous_messaging",
        "name": "Asynchronous Messaging",
        "description": "This template demonstrates how asynchronous messaging could be achieved using Ballerina.",
        "tags": ["#messaging"]
    }
]
